package com.orange.OSAC.services.implementation;

import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.orange.OSAC.dao.UserDAO;
import com.orange.OSAC.entities.User;
import com.orange.OSAC.services.IUserService;

@Service
@Transactional
public class UserService implements IUserService
{
	/* Debug */
	private final static Logger logger = LoggerFactory.getLogger(UserService.class);

	@Resource
	private UserDAO	userDAO;
	
	public User getUser(long id){
		logger.debug("Appel de la méthode getUser sur "+ id);
		return userDAO.findOne(id);
	}
	
	public List<User> findByDeletedDateIsNull()
	{
		logger.debug("Appel de la méthode findByDeletedDateIsNull");
		return userDAO.findByDeletedDateIsNull();
	}
	
	public Page<User> findByDeletedDateIsNull(Pageable pageable)
	{
		logger.debug("Appel de la méthode findByDeletedDateIsNull");
		return userDAO.findByDeletedDateIsNull(pageable);
	}
	
	public User findByNomLike(String userName) {
		logger.debug("Appel de la méthode findByNomLike sur "+ userName);
		return userDAO.findByNameLike(userName);
	}
	
	public User findByPrenomLike(String userFirstName) {
		logger.debug("Appel de la méthode findByPrenomLike sur "+ userFirstName);
		return userDAO.findByFirstNameLike(userFirstName);
	}
	
	public User findByCuid(String userCuid) {
		logger.debug("Appel de la méthode findByCuid sur "+ userCuid);
		return userDAO.findByCuid(userCuid);
	}

	public User findById(Long userId) {
		logger.debug("Appel de la méthode findById sur "+ userId);
		return userDAO.findById(userId);
	}
	
	public List<User> findAll() {
		logger.debug("Appel de la méthode findAll User");
		
		List<User>  list = userDAO.findAll();
		logger.debug("Size list user = "+list.size());
		return list;
	}

//	public void updateUser(User id) {
//		logger.debug("Appel de la méthode updateUser sur l'id: "+id);
//		userDAO.);
//	}
	
	public void deleteUser(long id) {
		logger.debug("Appel de la méthode deleteUser sur l'id: "+id);
		userDAO.delete(id);
	}
	
	public void saveUser(User userToSave) {
		logger.debug("Appel de la méthode saveUser sur l'id :"
						+userToSave.toString());
		userDAO.save(userToSave);
	}	
	/*
	###############################
	#                             #
	#        CUSTOM QUERY         #
	#                             #
	###############################
	*/
	@SuppressWarnings("unchecked")
	public List<User> seekUser(String userToSeek, Pageable pageable)
	{
		logger.debug("Appel de la méthode seekUser sur [{}])", userToSeek);
        
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("JpaQuery");
        EntityManager em = emf.createEntityManager();
 
        em.getTransaction().begin();

        List<User> list = em.createNativeQuery("Select * from utilisateur", User.class).getResultList();
        System.out.println(list.size());
 
        em.getTransaction().commit();
		return(list);
	}	
	
}
